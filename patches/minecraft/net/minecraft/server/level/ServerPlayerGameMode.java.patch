--- a/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -131,6 +_,10 @@
     }
 
     public void handleBlockBreakAction(BlockPos p_215120_, ServerboundPlayerActionPacket.Action p_215121_, Direction p_215122_, int p_215123_, int p_215124_) {
+        var event = net.minecraftforge.event.ForgeEventFactory.onLeftClickBlock(player, p_215120_, p_215122_, p_215121_);
+        if (event == null || !this.isCreative()) {
+           return;
+        }
         if (!this.player.canInteractWithBlock(p_215120_, 1.0)) {
             this.debugLogging(p_215120_, false, p_215124_, "too far");
         } else if (p_215120_.getY() > p_215123_) {
@@ -159,6 +_,7 @@
                 float f = 1.0F;
                 BlockState blockstate = this.level.getBlockState(p_215120_);
                 if (!blockstate.isAir()) {
+                    if (!event.getUseBlock().isDenied()) {
                     EnchantmentHelper.onHitBlock(
                         this.level,
                         this.player.getMainHandItem(),
@@ -170,6 +_,7 @@
                         p_343810_ -> this.player.onEquippedItemBroken(p_343810_, EquipmentSlot.MAINHAND)
                     );
                     blockstate.attack(this.level, p_215120_, this.player);
+                    }
                     f = blockstate.getDestroyProgress(this.player, this.player.level(), p_215120_);
                 }
 
@@ -236,7 +_,8 @@
 
     public boolean destroyBlock(BlockPos p_9281_) {
         BlockState blockstate1 = this.level.getBlockState(p_9281_);
-        if (!this.player.getMainHandItem().canDestroyBlock(blockstate1, this.level, p_9281_, this.player)) {
+        int exp = net.minecraftforge.common.ForgeHooks.onBlockBreakEvent(level, gameModeForPlayer, player, p_9281_);
+        if (exp == -1) {
             return false;
         } else {
             BlockEntity blockentity = this.level.getBlockEntity(p_9281_);
@@ -244,30 +_,47 @@
             if (block instanceof GameMasterBlock && !this.player.canUseGameMasterBlocks()) {
                 this.level.sendBlockUpdated(p_9281_, blockstate1, blockstate1, 3);
                 return false;
+            } else if (player.getMainHandItem().onBlockStartBreak(p_9281_, player)) {
+               return false;
             } else if (this.player.blockActionRestricted(this.level, p_9281_, this.gameModeForPlayer)) {
                 return false;
             } else {
-                BlockState blockstate = block.playerWillDestroy(this.level, p_9281_, blockstate1, this.player);
-                boolean flag1 = this.level.removeBlock(p_9281_, false);
-                if (flag1) {
-                    block.destroy(this.level, p_9281_, blockstate);
-                }
-
+                BlockState blockstate = blockstate1;
                 if (this.player.preventsBlockDrops()) {
+                    removeBlock(p_9281_, false);
                     return true;
                 } else {
                     ItemStack itemstack = this.player.getMainHandItem();
                     ItemStack itemstack1 = itemstack.copy();
-                    boolean flag = this.player.hasCorrectToolForDrops(blockstate);
+                    boolean flag = blockstate.canHarvestBlock(this.level, p_9281_, this.player); // previously player.hasCorrectToolForDrops(blockstate)
                     itemstack.mineBlock(this.level, blockstate, p_9281_, this.player);
+
+                    if (itemstack.isEmpty() && !itemstack1.isEmpty()) {
+                        net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this.player, itemstack1, InteractionHand.MAIN_HAND);
+                    }
+                    boolean flag1 = removeBlock(p_9281_, flag);
+
                     if (flag1 && flag) {
                         block.playerDestroy(this.level, this.player, p_9281_, blockstate, blockentity, itemstack1);
                     }
 
+                    if (flag && exp > 0) {
+                        blockstate1.getBlock().popExperience(level, p_9281_, exp);
+                    }
+
                     return true;
                 }
             }
         }
+    }
+
+    private boolean removeBlock(BlockPos p_180235_1_, boolean canHarvest) {
+        BlockState state = this.level.getBlockState(p_180235_1_);
+        boolean removed = state.onDestroyedByPlayer(this.level, p_180235_1_, this.player, canHarvest, this.level.getFluidState(p_180235_1_));
+        if (removed) {
+             state.getBlock().destroy(this.level, p_180235_1_, state);
+        }
+        return removed;
     }
 
     public InteractionResult useItem(ServerPlayer p_9262_, Level p_9263_, ItemStack p_9264_, InteractionHand p_9265_) {
@@ -276,6 +_,8 @@
         } else if (p_9262_.getCooldowns().isOnCooldown(p_9264_)) {
             return InteractionResult.PASS;
         } else {
+            InteractionResult cancelResult = net.minecraftforge.common.ForgeHooks.onItemRightClick(p_9262_, p_9265_);
+            if (cancelResult != null) return cancelResult;
             int i = p_9264_.getCount();
             int j = p_9264_.getDamageValue();
             InteractionResult interactionresult = p_9264_.use(p_9263_, p_9262_, p_9265_);
@@ -314,6 +_,11 @@
         if (!blockstate.getBlock().isEnabled(p_9267_.enabledFeatures())) {
             return InteractionResult.FAIL;
         } else if (this.gameModeForPlayer == GameType.SPECTATOR) {
+        }
+
+        var event = new net.minecraftforge.event.entity.player.PlayerInteractEvent.RightClickBlock(p_9266_, p_9269_, blockpos, p_9270_);
+        if (net.minecraftforge.event.entity.player.PlayerInteractEvent.RightClickBlock.BUS.post(event)) return event.getCancellationResult();
+        if (this.gameModeForPlayer == GameType.SPECTATOR) {
             MenuProvider menuprovider = blockstate.getMenuProvider(p_9267_, blockpos);
             if (menuprovider != null) {
                 p_9266_.openMenu(menuprovider);
@@ -322,10 +_,16 @@
                 return InteractionResult.PASS;
             }
         } else {
+            UseOnContext useoncontext = new UseOnContext(p_9266_, p_9269_, p_9270_);
+            if (!event.getUseItem().isDenied()) {
+                InteractionResult result = p_9268_.onItemUseFirst(useoncontext);
+                if (result != InteractionResult.PASS) return result;
+            }
             boolean flag = !p_9266_.getMainHandItem().isEmpty() || !p_9266_.getOffhandItem().isEmpty();
             boolean flag1 = p_9266_.isSecondaryUseActive() && flag;
+            flag1 &= !(p_9266_.getMainHandItem().doesSneakBypassUse(p_9267_, blockpos, p_9266_) && p_9266_.getOffhandItem().doesSneakBypassUse(p_9267_, blockpos, p_9266_));
             ItemStack itemstack = p_9268_.copy();
-            if (!flag1) {
+            if (event.getUseBlock().isAllowed() || (!event.getUseBlock().isDenied() && !flag1)) {
                 InteractionResult interactionresult = blockstate.useItemOn(p_9266_.getItemInHand(p_9269_), p_9267_, p_9266_, p_9269_, p_9270_);
                 if (interactionresult.consumesAction()) {
                     CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
@@ -341,8 +_,8 @@
                 }
             }
 
-            if (!p_9268_.isEmpty() && !p_9266_.getCooldowns().isOnCooldown(p_9268_)) {
-                UseOnContext useoncontext = new UseOnContext(p_9266_, p_9269_, p_9270_);
+            if (event.getUseItem().isAllowed() || (!p_9268_.isEmpty() && !p_9266_.getCooldowns().isOnCooldown(p_9268_))) {
+                if (event.getUseItem().isDenied()) return InteractionResult.PASS;
                 InteractionResult interactionresult2;
                 if (p_9266_.hasInfiniteMaterials()) {
                     int i = p_9268_.getCount();
