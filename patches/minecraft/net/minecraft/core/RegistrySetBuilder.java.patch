--- a/net/minecraft/core/RegistrySetBuilder.java
+++ b/net/minecraft/core/RegistrySetBuilder.java
@@ -22,7 +_,8 @@
 import net.minecraft.tags.TagKey;
 import org.apache.commons.lang3.mutable.MutableObject;
 
-public class RegistrySetBuilder {
+public class RegistrySetBuilder implements net.minecraftforge.common.extensions.IForgeRegistrySetBuilder {
+    private final it.unimi.dsi.fastutil.objects.Object2IntMap<ResourceKey<? extends Registry<?>>> indexes = new it.unimi.dsi.fastutil.objects.Object2IntLinkedOpenHashMap<>();
     private final List<RegistrySetBuilder.RegistryStub<?>> entries = new ArrayList<>();
 
     static <T> HolderGetter<T> wrapContextLookup(final HolderLookup.RegistryLookup<T> p_255625_) {
@@ -66,14 +_,43 @@
     public <T> RegistrySetBuilder add(
         ResourceKey<? extends Registry<T>> p_256446_, Lifecycle p_256394_, RegistrySetBuilder.RegistryBootstrap<T> p_256638_
     ) {
-        this.entries.add(new RegistrySetBuilder.RegistryStub<>(p_256446_, p_256394_, p_256638_));
+        add(new RegistrySetBuilder.RegistryStub<>(p_256446_, p_256394_, p_256638_));
         return this;
     }
 
+    // Forge: This merges two entries in this builder together, so that we can reuse vanilla boostrap methods, or potentially other modder's methods.
+    private <T> RegistrySetBuilder.RegistryStub<T> add(RegistrySetBuilder.RegistryStub<T> entry) {
+        int idx = indexes.getOrDefault(entry.key(), -1);
+        if (idx != -1) {
+            var _oldB = ((RegistrySetBuilder.RegistryStub<T>)this.entries.get(idx)).bootstrap();
+            var _newB = entry.bootstrap();
+            var _new = new RegistrySetBuilder.RegistryStub<>(entry.key(), entry.lifecycle(), ctx -> {
+                _oldB.run(ctx);
+                _newB.run(ctx);
+            });
+            this.entries.set(idx, _new);
+            return _new;
+        } else {
+            this.indexes.put(entry.key(), this.entries.size());
+            this.entries.add(entry);
+            return entry;
+        }
+    }
+
+    public RegistrySetBuilder copy() {
+        var ret = new RegistrySetBuilder();
+        this.entries.forEach(ret::add);
+        return ret;
+    }
+
     public <T> RegistrySetBuilder add(ResourceKey<? extends Registry<T>> p_256261_, RegistrySetBuilder.RegistryBootstrap<T> p_256010_) {
         return this.add(p_256261_, Lifecycle.stable(), p_256010_);
     }
 
+    public List<? extends ResourceKey<? extends Registry<?>>> getEntryKeys() {
+        return this.entries.stream().map(RegistrySetBuilder.RegistryStub::key).toList();
+    }
+
     private RegistrySetBuilder.BuildState createState(RegistryAccess p_256400_) {
         RegistrySetBuilder.BuildState registrysetbuilder$buildstate = RegistrySetBuilder.BuildState.create(
             p_256400_, this.entries.stream().map(RegistrySetBuilder.RegistryStub::key)
@@ -180,14 +_,16 @@
             throw new NullPointerException("No cloner for " + p_313093_.location());
         } else {
             Map<ResourceKey<T>, Holder.Reference<T>> map = new HashMap<>();
-            HolderLookup.RegistryLookup<T> registrylookup = p_311682_.lookupOrThrow(p_313093_);
+            HolderLookup.RegistryLookup<T> registrylookup = p_311682_.lookup(p_313093_).orElse(null);
             registrylookup.listElements().forEach(p_308453_ -> {
                 ResourceKey<T> resourcekey = p_308453_.key();
                 RegistrySetBuilder.LazyHolder<T> lazyholder = new RegistrySetBuilder.LazyHolder<>(p_312548_, resourcekey);
                 lazyholder.supplier = () -> cloner.clone((T)p_308453_.value(), p_311682_, p_311605_.getValue());
                 map.put(resourcekey, lazyholder);
             });
-            HolderLookup.RegistryLookup<T> registrylookup1 = p_313198_.lookupOrThrow(p_313093_);
+            HolderLookup.RegistryLookup<T> registrylookup1 = p_313198_.lookup(p_313093_).orElse(null);
+            Lifecycle lifecycle = registrylookup.registryLifecycle();
+            if (registrylookup1 != null) {
             registrylookup1.listElements().forEach(p_308430_ -> {
                 ResourceKey<T> resourcekey = p_308430_.key();
                 map.computeIfAbsent(resourcekey, p_308437_ -> {
@@ -196,7 +_,8 @@
                     return lazyholder;
                 });
             });
-            Lifecycle lifecycle = registrylookup.registryLifecycle().add(registrylookup1.registryLifecycle());
+            lifecycle = registrylookup.registryLifecycle().add(registrylookup1.registryLifecycle());
+            }
             return lookupFromMap(p_313093_, lifecycle, p_312548_, map);
         }
     }
@@ -265,6 +_,11 @@
                 @Override
                 public <S> HolderGetter<S> lookup(ResourceKey<? extends Registry<? extends S>> p_255961_) {
                     return (HolderGetter<S>)BuildState.this.registries.getOrDefault(p_255961_.location(), BuildState.this.lookup);
+                }
+
+                @Override
+                public <S> Optional<HolderLookup.RegistryLookup<S>> registryLookup(ResourceKey<? extends Registry<? extends S>> registry) {
+                   return Optional.ofNullable((HolderLookup.RegistryLookup<S>) BuildState.this.registries.get(registry.location()));
                 }
             };
         }
