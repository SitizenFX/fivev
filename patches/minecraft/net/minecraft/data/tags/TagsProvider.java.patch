--- a/net/minecraft/data/tags/TagsProvider.java
+++ b/net/minecraft/data/tags/TagsProvider.java
@@ -32,26 +_,57 @@
     private final CompletableFuture<TagsProvider.TagLookup<T>> parentProvider;
     protected final ResourceKey<? extends Registry<T>> registryKey;
     protected final Map<ResourceLocation, TagBuilder> builders = Maps.newLinkedHashMap();
+    protected final String modId;
+    @org.jetbrains.annotations.Nullable
+    protected final net.minecraftforge.common.data.ExistingFileHelper existingFileHelper;
+    private final net.minecraftforge.common.data.ExistingFileHelper.IResourceType resourceType;
+    private final net.minecraftforge.common.data.ExistingFileHelper.IResourceType elementResourceType; // FORGE: Resource type for validating required references to datapack registry elements.
 
+    /**
+     * @deprecated Forge: Use the {@linkplain #TagsProvider(PackOutput, ResourceKey, CompletableFuture, String, net.minecraftforge.common.data.ExistingFileHelper) mod id variant}
+     */
     protected TagsProvider(PackOutput p_256596_, ResourceKey<? extends Registry<T>> p_255886_, CompletableFuture<HolderLookup.Provider> p_256513_) {
-        this(p_256596_, p_255886_, p_256513_, CompletableFuture.completedFuture(TagsProvider.TagLookup.empty()));
+        this(p_256596_, p_255886_, p_256513_, "vanilla", null);
+    }
+
+    protected TagsProvider(PackOutput p_256596_, ResourceKey<? extends Registry<T>> p_255886_, CompletableFuture<HolderLookup.Provider> p_256513_, String modId, @org.jetbrains.annotations.Nullable net.minecraftforge.common.data.ExistingFileHelper existingFileHelper) {
+       this(p_256596_, p_255886_, p_256513_, CompletableFuture.completedFuture(TagsProvider.TagLookup.empty()), modId, existingFileHelper);
+    }
+
+    /**
+     * @deprecated Forge: Use the {@linkplain #TagsProvider(PackOutput, ResourceKey, CompletableFuture, CompletableFuture, String, net.minecraftforge.common.data.ExistingFileHelper) mod id variant}
+     */
+    protected TagsProvider(PackOutput p_275432_, ResourceKey<? extends Registry<T>> p_275476_, CompletableFuture<HolderLookup.Provider> p_275222_, CompletableFuture<TagsProvider.TagLookup<T>> p_275565_) {
+        this(p_275432_, p_275476_, p_275222_, p_275565_, "vanilla", null);
     }
 
     protected TagsProvider(
         PackOutput p_275432_,
         ResourceKey<? extends Registry<T>> p_275476_,
         CompletableFuture<HolderLookup.Provider> p_275222_,
-        CompletableFuture<TagsProvider.TagLookup<T>> p_275565_
+        CompletableFuture<TagsProvider.TagLookup<T>> p_275565_,
+        String modId,
+        @org.jetbrains.annotations.Nullable net.minecraftforge.common.data.ExistingFileHelper existingFileHelper
     ) {
         this.pathProvider = p_275432_.createRegistryTagsPathProvider(p_275476_);
         this.registryKey = p_275476_;
         this.parentProvider = p_275565_;
         this.lookupProvider = p_275222_;
+        this.modId = modId;
+        this.existingFileHelper = existingFileHelper;
+        this.resourceType = new net.minecraftforge.common.data.ExistingFileHelper.ResourceType(net.minecraft.server.packs.PackType.SERVER_DATA, ".json", net.minecraft.core.registries.Registries.tagsDirPath(p_275476_));
+        this.elementResourceType = new net.minecraftforge.common.data.ExistingFileHelper.ResourceType(net.minecraft.server.packs.PackType.SERVER_DATA, ".json", net.minecraft.core.registries.Registries.elementsDirPath(p_275476_));
+    }
+
+    // Forge: Allow customizing the path for a given tag or returning null
+    @org.jetbrains.annotations.Nullable
+    protected Path getPath(ResourceLocation id) {
+        return this.pathProvider.json(id);
     }
 
     @Override
     public String getName() {
-        return "Tags for " + this.registryKey.location();
+        return "Tags for " + this.registryKey.location() + " mod id " + this.modId;
     }
 
     protected abstract void addTags(HolderLookup.Provider p_256380_);
@@ -69,7 +_,13 @@
             .thenCombineAsync(this.parentProvider, (p_274778_, p_274779_) -> new CombinedData<>(p_274778_, (TagsProvider.TagLookup<T>)p_274779_), Util.backgroundExecutor())
             .thenCompose(
                 p_325926_ -> {
-                    HolderLookup.RegistryLookup<T> registrylookup = p_325926_.contents.lookupOrThrow(this.registryKey);
+                    HolderLookup.RegistryLookup<T> registrylookup = p_325926_.contents.lookup(this.registryKey).orElseThrow(() -> {
+                       // FORGE: Throw a more descriptive error message if this is a Forge registry without tags enabled
+                       if (net.minecraftforge.registries.RegistryManager.ACTIVE.getRegistry(this.registryKey) != null) {
+                          return new IllegalStateException("Forge registry " + this.registryKey.location() + " does not have support for tags");
+                       }
+                       return new IllegalStateException("Registry " + this.registryKey.location() + " not found");
+                    });
                     Predicate<ResourceLocation> predicate = p_255496_ -> registrylookup.get(ResourceKey.create(this.registryKey, p_255496_)).isPresent();
                     Predicate<ResourceLocation> predicate1 = p_274776_ -> this.builders.containsKey(p_274776_)
                         || p_325926_.parent.contains(TagKey.create(this.registryKey, p_274776_));
@@ -82,7 +_,7 @@
                                     ResourceLocation resourcelocation = p_325931_.getKey();
                                     TagBuilder tagbuilder = p_325931_.getValue();
                                     List<TagEntry> list = tagbuilder.build();
-                                    List<TagEntry> list1 = list.stream().filter(p_274771_ -> !p_274771_.verifyIfPresent(predicate, predicate1)).toList();
+                                    List<TagEntry> list1 = java.util.stream.Stream.concat(list.stream(), tagbuilder.getRemoveEntries()).filter(p_274771_ -> !p_274771_.verifyIfPresent(predicate, predicate1)).filter(this::missing).toList();
                                     if (!list1.isEmpty()) {
                                         throw new IllegalArgumentException(
                                             String.format(
@@ -93,8 +_,11 @@
                                             )
                                         );
                                     } else {
-                                        Path path = this.pathProvider.json(resourcelocation);
-                                        return DataProvider.saveStable(p_253684_, p_325926_.contents, TagFile.CODEC, new TagFile(list, false), path);
+                                        Path path = this.getPath(resourcelocation);
+                                        if (path == null) {
+                                            return CompletableFuture.completedFuture(null); // Forge: Allow running this data provider without writing it. Recipe provider needs valid tags.
+                                        }
+                                        return DataProvider.saveStable(p_253684_, p_325926_.contents, TagFile.CODEC, new TagFile(list, tagbuilder.isReplace(), tagbuilder.getRemoveEntries().toList()), path);
                                     }
                                 }
                             )
@@ -106,11 +_,16 @@
 
     protected TagsProvider.TagAppender<T> tag(TagKey<T> p_206425_) {
         TagBuilder tagbuilder = this.getOrCreateRawBuilder(p_206425_);
-        return new TagsProvider.TagAppender<>(tagbuilder);
+        return new TagsProvider.TagAppender<>(tagbuilder, modId);
     }
 
     protected TagBuilder getOrCreateRawBuilder(TagKey<T> p_236452_) {
-        return this.builders.computeIfAbsent(p_236452_.location(), p_236442_ -> TagBuilder.create());
+        return this.builders.computeIfAbsent(p_236452_.location(), p_236442_ -> {
+            if (existingFileHelper != null) {
+                existingFileHelper.trackGenerated(p_236442_, resourceType);
+            }
+            return TagBuilder.create();
+        });
     }
 
     public CompletableFuture<TagsProvider.TagLookup<T>> contentsGetter() {
@@ -125,11 +_,26 @@
         });
     }
 
-    public static class TagAppender<T> {
+    private boolean missing(TagEntry reference) {
+        // Optional tags should not be validated
+
+        if (reference.isRequired()) {
+           return existingFileHelper == null || !existingFileHelper.exists(reference.getId(), reference.isTag() ? resourceType : elementResourceType);
+        }
+        return false;
+     }
+
+    public static class TagAppender<T> implements net.minecraftforge.common.extensions.IForgeTagAppender<T> {
         private final TagBuilder builder;
+        private final String modid;
 
         protected TagAppender(TagBuilder p_256426_) {
+            this(p_256426_, "vanilla");
+        }
+
+        protected TagAppender(TagBuilder p_256426_, String modid) {
             this.builder = p_256426_;
+            this.modid = modid;
         }
 
         public final TagsProvider.TagAppender<T> add(ResourceKey<T> p_256138_) {
@@ -167,6 +_,19 @@
         public TagsProvider.TagAppender<T> addOptionalTag(ResourceLocation p_176842_) {
             this.builder.addOptionalTag(p_176842_);
             return this;
+        }
+
+        public TagsProvider.TagAppender<T> add(TagEntry tag) {
+            builder.add(tag);
+            return this;
+        }
+
+        public TagBuilder getInternalBuilder() {
+            return builder;
+        }
+
+        public String getModID() {
+            return modid;
         }
     }
 
