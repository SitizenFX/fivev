--- a/net/minecraft/data/registries/RegistriesDatapackGenerator.java
+++ b/net/minecraft/data/registries/RegistriesDatapackGenerator.java
@@ -20,10 +_,21 @@
 public class RegistriesDatapackGenerator implements DataProvider {
     private final PackOutput output;
     private final CompletableFuture<HolderLookup.Provider> registries;
+    private final java.util.function.Predicate<String> namespacePredicate;
 
     public RegistriesDatapackGenerator(PackOutput p_256643_, CompletableFuture<HolderLookup.Provider> p_255780_) {
+        this(p_256643_, p_255780_, null);
+    }
+
+    public RegistriesDatapackGenerator(PackOutput p_256643_, CompletableFuture<HolderLookup.Provider> p_255780_, @org.jetbrains.annotations.Nullable java.util.Set<String> modIds) {
         this.registries = p_255780_;
         this.output = p_256643_;
+        this.namespacePredicate = modIds == null ? namespace -> true : modIds::contains;
+    }
+
+    /** Forge: Call this to get the registry holder lookup provider that includes elements added via {@link net.minecraftforge.common.data.DatapackBuiltinEntriesProvider} */
+    public CompletableFuture<HolderLookup.Provider> getRegistryProvider() {
+       return registries;
     }
 
     @Override
@@ -33,8 +_,7 @@
                 p_325918_ -> {
                     DynamicOps<JsonElement> dynamicops = p_325918_.createSerializationContext(JsonOps.INSTANCE);
                     return CompletableFuture.allOf(
-                        RegistryDataLoader.WORLDGEN_REGISTRIES
-                            .stream()
+                        RegistryDataLoader.getWorldGenAndDimensionStream()
                             .flatMap(p_256552_ -> this.dumpRegistryCap(p_255785_, p_325918_, dynamicops, (RegistryDataLoader.RegistryData<?>)p_256552_).stream())
                             .toArray(CompletableFuture[]::new)
                     );
@@ -52,6 +_,7 @@
                     PackOutput.PathProvider packoutput$pathprovider = this.output.createRegistryElementsPathProvider(resourcekey);
                     return CompletableFuture.allOf(
                         p_358460_.listElements()
+                            .filter(holder -> shouldDump(holder.key()))
                             .map(
                                 p_256105_ -> dumpValue(
                                     packoutput$pathprovider.json(p_256105_.key().location()),
@@ -65,6 +_,10 @@
                     );
                 }
             );
+    }
+
+    protected boolean shouldDump(ResourceKey<?> key) {
+        return this.namespacePredicate.test(key.location().getNamespace());
     }
 
     private static <E> CompletableFuture<?> dumpValue(
