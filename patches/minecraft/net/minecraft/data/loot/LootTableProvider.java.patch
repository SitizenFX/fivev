--- a/net/minecraft/data/loot/LootTableProvider.java
+++ b/net/minecraft/data/loot/LootTableProvider.java
@@ -61,7 +_,7 @@
     private CompletableFuture<?> run(CachedOutput p_327970_, HolderLookup.Provider p_331092_) {
         WritableRegistry<LootTable> writableregistry = new MappedRegistry<>(Registries.LOOT_TABLE, Lifecycle.experimental());
         Map<RandomSupport.Seed128bit, ResourceLocation> map = new Object2ObjectOpenHashMap<>();
-        this.subProviders.forEach(p_341016_ -> p_341016_.provider().apply(p_331092_).generate((p_358218_, p_358219_) -> {
+        this.getTables().forEach(p_341016_ -> p_341016_.provider().apply(p_331092_).generate((p_358218_, p_358219_) -> {
             ResourceLocation resourcelocation = sequenceIdForLootTable(p_358218_);
             ResourceLocation resourcelocation1 = map.put(RandomSequence.seedForKey(resourcelocation), resourcelocation);
             if (resourcelocation1 != null) {
@@ -77,18 +_,8 @@
         HolderGetter.Provider holdergetter$provider = new RegistryAccess.ImmutableRegistryAccess(List.of(writableregistry)).freeze();
         ValidationContext validationcontext = new ValidationContext(problemreporter$collector, LootContextParamSets.ALL_PARAMS, holdergetter$provider);
 
-        for (ResourceKey<LootTable> resourcekey : Sets.difference(this.requiredTables, writableregistry.registryKeySet())) {
-            problemreporter$collector.report(new LootTableProvider.MissingTableProblem(resourcekey));
-        }
+        validate(writableregistry, validationcontext, problemreporter$collector);
 
-        writableregistry.listElements()
-            .forEach(
-                p_405062_ -> p_405062_.value()
-                    .validate(
-                        validationcontext.setContextKeySet(p_405062_.value().getParamSet())
-                            .enterElement(new ProblemReporter.RootElementPathElement(p_405062_.key()), p_405062_.key())
-                    )
-            );
         if (!problemreporter$collector.isEmpty()) {
             problemreporter$collector.forEach(
                 (p_405059_, p_405060_) -> LOGGER.warn("Found validation problem in {}: {}", p_405059_, p_405060_.description())
@@ -111,6 +_,21 @@
     @Override
     public final String getName() {
         return "Loot Tables";
+    }
+
+    public List<LootTableProvider.SubProviderEntry> getTables() {
+        return this.subProviders;
+    }
+
+    protected void validate(net.minecraft.core.Registry<LootTable> map, ValidationContext validationcontext, ProblemReporter report) {
+        for (ResourceKey<LootTable> resourcekey : Sets.difference(this.requiredTables, map.registryKeySet())) {
+            report.report(new LootTableProvider.MissingTableProblem(resourcekey));
+        }
+
+        map.listElements().forEach(table -> table.value().validate(
+            validationcontext.setContextKeySet(table.value().getParamSet())
+                .enterElement(new ProblemReporter.RootElementPathElement(table.key()), table.key())
+        ));
     }
 
     public record MissingTableProblem(ResourceKey<LootTable> id) implements ProblemReporter.Problem {
