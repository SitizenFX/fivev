--- a/net/minecraft/client/KeyMapping.java
+++ b/net/minecraft/client/KeyMapping.java
@@ -19,9 +_,9 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class KeyMapping implements Comparable<KeyMapping> {
+public class KeyMapping implements Comparable<KeyMapping>, net.minecraftforge.client.extensions.IForgeKeyMapping {
     private static final Map<String, KeyMapping> ALL = Maps.newHashMap();
-    private static final Map<InputConstants.Key, List<KeyMapping>> MAP = Maps.newHashMap();
+    private static final net.minecraftforge.client.settings.KeyMappingLookup MAP = new net.minecraftforge.client.settings.KeyMappingLookup();
     private final String name;
     private final InputConstants.Key defaultKey;
     private final KeyMapping.Category category;
@@ -38,7 +_,7 @@
     }
 
     private static void forAllKeyMappings(InputConstants.Key p_424096_, Consumer<KeyMapping> p_427756_) {
-        List<KeyMapping> list = MAP.get(p_424096_);
+        List<KeyMapping> list = MAP.getAll(p_424096_);
         if (list != null && !list.isEmpty()) {
             for (KeyMapping keymapping : list) {
                 p_427756_.accept(keymapping);
@@ -100,7 +_,7 @@
     }
 
     public boolean isDown() {
-        return this.isDown;
+        return this.isDown && isConflictContextAndModifierActive();
     }
 
     public KeyMapping.Category getCategory() {
@@ -140,7 +_,16 @@
     public int compareTo(KeyMapping p_90841_) {
         return this.category == p_90841_.category
             ? I18n.get(this.name).compareTo(I18n.get(p_90841_.name))
-            : Integer.compare(KeyMapping.Category.SORT_ORDER.indexOf(this.category), KeyMapping.Category.SORT_ORDER.indexOf(p_90841_.category));
+            : compareSort(this.category, p_90841_.category);
+    }
+
+    private static int compareSort(Category c1, Category c2) {
+        int o1 = KeyMapping.Category.SORT_ORDER.indexOf(c1);
+        int o2 = KeyMapping.Category.SORT_ORDER.indexOf(c2);
+        if (o1 == -1 && o2 != -1) return 1;
+        if (o1 != -1 && o2 == -1) return -1;
+        if (o1 == -1 && o2 == -1) return I18n.get(c1.id().toLanguageKey("key.category")).compareTo(I18n.get(c1.id().toLanguageKey("key.category")));
+        return  o1 - o2;
     }
 
     public static Supplier<Component> createNameSupplier(String p_90843_) {
@@ -149,6 +_,20 @@
     }
 
     public boolean same(KeyMapping p_90851_) {
+        if (getKeyConflictContext().conflicts(p_90851_.getKeyConflictContext()) || p_90851_.getKeyConflictContext().conflicts(getKeyConflictContext())) {
+            var keyModifier = getKeyModifier();
+            var otherKeyModifier = p_90851_.getKeyModifier();
+            if (keyModifier.matches(p_90851_.getKey()) || otherKeyModifier.matches(getKey())) {
+               return true;
+            } else if (getKey().equals(p_90851_.getKey())) {
+               // IN_GAME key contexts have a conflict when at least one modifier is NONE.
+               // For example: If you hold shift to crouch, you can still press E to open your inventory. This means that a Shift+E hotkey is in conflict with E.
+               // GUI and other key contexts do not have this limitation.
+               return keyModifier == otherKeyModifier ||
+                  (getKeyConflictContext().conflicts(net.minecraftforge.client.settings.KeyConflictContext.IN_GAME) &&
+                  (keyModifier == net.minecraftforge.client.settings.KeyModifier.NONE || otherKeyModifier == net.minecraftforge.client.settings.KeyModifier.NONE));
+            }
+         }
         return this.key.equals(p_90851_.key);
     }
 
@@ -167,11 +_,13 @@
     }
 
     public Component getTranslatedKeyMessage() {
+        return getKeyModifier().getCombinedName(key, () -> {
         return this.key.getDisplayName();
+        });
     }
 
     public boolean isDefault() {
-        return this.key.equals(this.defaultKey);
+        return this.key.equals(this.defaultKey) && getKeyModifier() == getDefaultKeyModifier();
     }
 
     public String saveString() {
@@ -183,12 +_,94 @@
     }
 
     private void registerMapping(InputConstants.Key p_423386_) {
-        MAP.computeIfAbsent(p_423386_, p_420623_ -> new ArrayList<>()).add(this);
+        MAP.put(p_423386_, this);
     }
 
     @Nullable
     public static KeyMapping get(String p_378660_) {
         return ALL.get(p_378660_);
+    }
+
+    private net.minecraftforge.client.settings.KeyModifier keyModifierDefault = net.minecraftforge.client.settings.KeyModifier.NONE;
+    private net.minecraftforge.client.settings.KeyModifier keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+    private net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext = net.minecraftforge.client.settings.KeyConflictContext.UNIVERSAL;
+
+    /**
+     * Convenience constructor for creating KeyBindings with keyConflictContext set.
+     */
+    public KeyMapping(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, final InputConstants.Type inputType, final int keyCode, Category category) {
+        this(description, keyConflictContext, inputType.getOrCreate(keyCode), category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyBindings with keyConflictContext set.
+     */
+    public KeyMapping(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, InputConstants.Key keyCode, Category category) {
+        this(description, keyConflictContext, net.minecraftforge.client.settings.KeyModifier.NONE, keyCode, category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set.
+     */
+    public KeyMapping(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, net.minecraftforge.client.settings.KeyModifier keyModifier, final InputConstants.Type inputType, final int keyCode, Category category) {
+        this(description, keyConflictContext, keyModifier, inputType.getOrCreate(keyCode), category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set.
+     */
+    public KeyMapping(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, net.minecraftforge.client.settings.KeyModifier keyModifier, InputConstants.Key keyCode, Category category) {
+       this.name = description;
+       this.key = keyCode;
+       this.defaultKey = keyCode;
+       this.category = category;
+       this.keyConflictContext = keyConflictContext;
+       this.keyModifier = keyModifier;
+       this.keyModifierDefault = keyModifier;
+       if (this.keyModifier.matches(keyCode))
+          this.keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+       ALL.put(description, this);
+       MAP.put(keyCode, this);
+    }
+
+    @Override
+    public InputConstants.Key getKey() {
+        return this.key;
+    }
+
+    @Override
+    public void setKeyConflictContext(net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext) {
+        this.keyConflictContext = keyConflictContext;
+    }
+
+    @Override
+    public net.minecraftforge.client.settings.IKeyConflictContext getKeyConflictContext() {
+        return keyConflictContext;
+    }
+
+    @Override
+    public net.minecraftforge.client.settings.KeyModifier getDefaultKeyModifier() {
+        return keyModifierDefault;
+    }
+
+    @Override
+    public net.minecraftforge.client.settings.KeyModifier getKeyModifier() {
+        return keyModifier;
+    }
+
+    @Override
+    public void setKeyModifierAndCode(@org.jetbrains.annotations.Nullable net.minecraftforge.client.settings.KeyModifier keyModifier, InputConstants.Key keyCode) {
+        MAP.remove(this);
+
+        if (keyModifier == null)
+            keyModifier = net.minecraftforge.client.settings.KeyModifier.getModifier(this.key);
+        if (keyModifier == null || keyCode == InputConstants.UNKNOWN || net.minecraftforge.client.settings.KeyModifier.isKeyCodeModifier(keyCode))
+            keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+
+        this.key = keyCode;
+        this.keyModifier = keyModifier;
+
+        MAP.put(keyCode, this);
     }
 
     @OnlyIn(Dist.CLIENT)
