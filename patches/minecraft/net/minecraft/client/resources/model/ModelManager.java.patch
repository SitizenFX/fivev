--- a/net/minecraft/client/resources/model/ModelManager.java
+++ b/net/minecraft/client/resources/model/ModelManager.java
@@ -57,6 +_,7 @@
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final FileToIdConverter MODEL_LISTER = FileToIdConverter.json("models");
     private Map<ResourceLocation, ItemModel> bakedItemStackModels = Map.of();
+    private Map<ResourceLocation, ItemModel> bakedItemStackModelsView = Map.of();
     private Map<ResourceLocation, ClientItem.Properties> itemProperties = Map.of();
     private final AtlasManager atlasManager;
     private final PlayerSkinRenderCache playerSkinRenderCache;
@@ -66,6 +_,7 @@
     private SpecialBlockModelRenderer specialBlockModelRenderer = SpecialBlockModelRenderer.EMPTY;
     private ModelBakery.MissingModels missingModels;
     private Object2IntMap<BlockState> modelGroups = Object2IntMaps.emptyMap();
+    private ModelBakery modelBakery;
 
     public ModelManager(BlockColors p_119407_, AtlasManager p_423190_, PlayerSkinRenderCache p_429874_) {
         this.blockColors = p_119407_;
@@ -82,6 +_,10 @@
         return this.bakedItemStackModels.getOrDefault(p_376816_, this.missingModels.item());
     }
 
+    public Map<ResourceLocation, ItemModel> getItemModels() {
+        return this.bakedItemStackModelsView;
+    }
+
     public ClientItem.Properties getItemProperties(ResourceLocation p_378319_) {
         return this.itemProperties.getOrDefault(p_378319_, ClientItem.Properties.DEFAULT);
     }
@@ -94,6 +_,7 @@
     public final CompletableFuture<Void> reload(
         PreparableReloadListener.SharedState p_427489_, Executor p_250550_, PreparableReloadListener.PreparationBarrier p_249079_, Executor p_249221_
     ) {
+        net.minecraftforge.client.model.geometry.GeometryLoaderManager.init();
         ResourceManager resourcemanager = p_427489_.resourceManager();
         CompletableFuture<EntityModelSet> completablefuture = CompletableFuture.supplyAsync(EntityModelSet::vanilla, p_250550_);
         CompletableFuture<SpecialBlockModelRenderer> completablefuture1 = completablefuture.thenApplyAsync(
@@ -229,6 +_,7 @@
             }, p_394729_)
             .thenApply(
                 p_421082_ -> {
+                    net.minecraftforge.client.ForgeHooksClient.onModifyBakingResult(p_248945_, p_421082_);
                     multimap.asMap()
                         .forEach(
                             (p_376688_, p_252017_) -> LOGGER.warn(
@@ -249,7 +_,7 @@
                             )
                         );
                     Map<BlockState, BlockStateModel> map = createBlockStateToModelDispatch(p_421082_.blockStateModels(), p_421082_.missingModels().block());
-                    return new ModelManager.ReloadState(p_421082_, p_361513_, map, p_378097_, p_377275_);
+                    return new ModelManager.ReloadState(p_421082_, p_361513_, map, p_378097_, p_377275_, p_248945_);
                 }
             );
     }
@@ -284,10 +_,15 @@
 
     private void apply(ModelManager.ReloadState p_248996_) {
         ModelBakery.BakingResult modelbakery$bakingresult = p_248996_.bakedModels;
+        // TODO [BlockState Models] fix
+        //this.bakedBlockStateModelsView = java.util.Collections.unmodifiableMap(this.bakedBlockStateModels);
         this.bakedItemStackModels = modelbakery$bakingresult.itemStackModels();
+        this.bakedItemStackModelsView = java.util.Collections.unmodifiableMap(this.bakedItemStackModels);
         this.itemProperties = modelbakery$bakingresult.itemProperties();
         this.modelGroups = p_248996_.modelGroups;
         this.missingModels = modelbakery$bakingresult.missingModels();
+        this.modelBakery = p_248996_.modelBakery();
+        net.minecraftforge.client.ForgeHooksClient.onModelBake(this, this.modelBakery);
         this.blockModelShaper.replaceCache(p_248996_.modelCache);
         this.specialBlockModelRenderer = p_248996_.specialBlockModelRenderer;
         this.entityModelSet = p_248996_.entityModelSet;
@@ -311,6 +_,10 @@
         }
     }
 
+    public ModelBakery getModelBakery() {
+        return com.google.common.base.Preconditions.checkNotNull(modelBakery, "Attempted to query model bakery before it has been initialized.");
+    }
+
     public Supplier<SpecialBlockModelRenderer> specialBlockModelRenderer() {
         return () -> this.specialBlockModelRenderer;
     }
@@ -325,7 +_,8 @@
         Object2IntMap<BlockState> modelGroups,
         Map<BlockState, BlockStateModel> modelCache,
         EntityModelSet entityModelSet,
-        SpecialBlockModelRenderer specialBlockModelRenderer
+        SpecialBlockModelRenderer specialBlockModelRenderer,
+        ModelBakery modelBakery
     ) {
     }
 
