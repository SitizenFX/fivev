--- a/net/minecraft/client/resources/model/ModelManager.java
+++ b/net/minecraft/client/resources/model/ModelManager.java
@@ -77,6 +_,7 @@
         AtlasIds.BLOCKS
     );
     private Map<ResourceLocation, ItemModel> bakedItemStackModels = Map.of();
+    private Map<ResourceLocation, ItemModel> bakedItemStackModelsView = Map.of();
     private Map<ResourceLocation, ClientItem.Properties> itemProperties = Map.of();
     private final AtlasSet atlases;
     private final BlockModelShaper blockModelShaper;
@@ -86,6 +_,7 @@
     private int maxMipmapLevels;
     private ModelBakery.MissingModels missingModels;
     private Object2IntMap<BlockState> modelGroups = Object2IntMaps.emptyMap();
+    private ModelBakery modelBakery;
 
     public ModelManager(TextureManager p_119406_, BlockColors p_119407_, int p_119408_) {
         this.blockColors = p_119407_;
@@ -102,6 +_,10 @@
         return this.bakedItemStackModels.getOrDefault(p_376816_, this.missingModels.item());
     }
 
+    public Map<ResourceLocation, ItemModel> getItemModels() {
+        return this.bakedItemStackModelsView;
+    }
+
     public ClientItem.Properties getItemProperties(ResourceLocation p_378319_) {
         return this.itemProperties.getOrDefault(p_378319_, ClientItem.Properties.DEFAULT);
     }
@@ -114,6 +_,7 @@
     public final CompletableFuture<Void> reload(
         PreparableReloadListener.PreparationBarrier p_249079_, ResourceManager p_251134_, Executor p_250550_, Executor p_249221_
     ) {
+        net.minecraftforge.client.model.geometry.GeometryLoaderManager.init();
         CompletableFuture<EntityModelSet> completablefuture = CompletableFuture.supplyAsync(EntityModelSet::vanilla, p_250550_);
         CompletableFuture<SpecialBlockModelRenderer> completablefuture1 = completablefuture.thenApplyAsync(SpecialBlockModelRenderer::vanilla, p_250550_);
         CompletableFuture<Map<ResourceLocation, UnbakedModel>> completablefuture2 = loadBlockModels(p_251134_, p_250550_);
@@ -251,6 +_,7 @@
             }, p_394729_)
             .thenApply(
                 p_389636_ -> {
+                    net.minecraftforge.client.ForgeHooksClient.onModifyBakingResult(p_248945_, p_389636_);
                     multimap.asMap()
                         .forEach(
                             (p_376688_, p_252017_) -> LOGGER.warn(
@@ -271,7 +_,7 @@
                             )
                         );
                     Map<BlockState, BlockStateModel> map = createBlockStateToModelDispatch(p_389636_.blockStateModels(), p_389636_.missingModels().block());
-                    return new ModelManager.ReloadState(p_389636_, p_361513_, map, p_250646_, p_378097_, p_377275_, completablefuture);
+                    return new ModelManager.ReloadState(p_389636_, p_361513_, map, p_250646_, p_378097_, p_377275_, completablefuture, p_248945_);
                 }
             );
     }
@@ -308,10 +_,15 @@
         p_251960_.push("upload");
         p_248996_.atlasPreparations.values().forEach(AtlasSet.StitchResult::upload);
         ModelBakery.BakingResult modelbakery$bakingresult = p_248996_.bakedModels;
+        // TODO [BlockState Models] fix
+        //this.bakedBlockStateModelsView = java.util.Collections.unmodifiableMap(this.bakedBlockStateModels);
         this.bakedItemStackModels = modelbakery$bakingresult.itemStackModels();
+        this.bakedItemStackModelsView = java.util.Collections.unmodifiableMap(this.bakedItemStackModels);
         this.itemProperties = modelbakery$bakingresult.itemProperties();
         this.modelGroups = p_248996_.modelGroups;
         this.missingModels = modelbakery$bakingresult.missingModels();
+        this.modelBakery = p_248996_.modelBakery();
+        net.minecraftforge.client.ForgeHooksClient.onModelBake(this, this.modelBakery);
         p_251960_.popPush("cache");
         this.blockModelShaper.replaceCache(p_248996_.modelCache);
         this.specialBlockModelRenderer = p_248996_.specialBlockModelRenderer;
@@ -338,6 +_,7 @@
     }
 
     public TextureAtlas getAtlas(ResourceLocation p_119429_) {
+        if (this.atlases == null) throw new RuntimeException("getAtlasTexture called too early!");
         return this.atlases.getAtlas(p_119429_);
     }
 
@@ -350,6 +_,10 @@
         this.maxMipmapLevels = p_119411_;
     }
 
+    public ModelBakery getModelBakery() {
+        return com.google.common.base.Preconditions.checkNotNull(modelBakery, "Attempted to query model bakery before it has been initialized.");
+    }
+
     public Supplier<SpecialBlockModelRenderer> specialBlockModelRenderer() {
         return () -> this.specialBlockModelRenderer;
     }
@@ -366,7 +_,8 @@
         Map<ResourceLocation, AtlasSet.StitchResult> atlasPreparations,
         EntityModelSet entityModelSet,
         SpecialBlockModelRenderer specialBlockModelRenderer,
-        CompletableFuture<Void> readyForUpload
+        CompletableFuture<Void> readyForUpload,
+        ModelBakery modelBakery
     ) {
     }
 
