--- a/net/minecraft/client/renderer/LevelRenderer.java
+++ b/net/minecraft/client/renderer/LevelRenderer.java
@@ -109,7 +_,7 @@
     private final SkyRenderer skyRenderer = new SkyRenderer();
     private final CloudRenderer cloudRenderer = new CloudRenderer();
     private final WorldBorderRenderer worldBorderRenderer = new WorldBorderRenderer();
-    private final WeatherEffectRenderer weatherEffectRenderer = new WeatherEffectRenderer();
+    private WeatherEffectRenderer weatherEffectRenderer = new WeatherEffectRenderer();
     @Nullable
     private ClientLevel level;
     private final SectionOcclusionGraph sectionOcclusionGraph = new SectionOcclusionGraph();
@@ -482,7 +_,7 @@
             postchain1.addToFrame(framegraphbuilder, i, j, this.targets);
         }
 
-        this.addParticlesPass(framegraphbuilder, p_109604_, f, fogparameters);
+        this.addParticlesPass(framegraphbuilder, p_109604_, f, fogparameters, frustum);
         CloudStatus cloudstatus = this.minecraft.options.getCloudsType();
         if (cloudstatus != CloudStatus.OFF) {
             float f2 = this.level.effects().getCloudHeight();
@@ -499,6 +_,7 @@
         }
 
         this.addLateDebugPass(framegraphbuilder, vec3, fogparameters);
+        net.minecraftforge.client.event.ForgeEventFactoryClient.onLastFramePassAddition(framegraphbuilder, targets);
         profilerfiller.popPush("framegraph");
         framegraphbuilder.execute(p_367325_, new FrameGraphBuilder.Inspector() {
             @Override
@@ -564,7 +_,11 @@
             double d2 = vec3.z();
             p_369478_.push("terrain");
             this.renderSectionLayer(RenderType.solid(), d0, d1, d2, p_361439_, p_369924_);
+            // FORGE: fix flickering leaves when mods mess up the blurMipmap settings
+            var atlas = this.minecraft.getModelManager().getAtlas(net.minecraft.client.renderer.texture.TextureAtlas.LOCATION_BLOCKS);
+            atlas.setBlurMipmap(false, this.minecraft.options.mipmapLevels().get() > 0);
             this.renderSectionLayer(RenderType.cutoutMipped(), d0, d1, d2, p_361439_, p_369924_);
+            atlas.restoreLastBlurMipmap();
             this.renderSectionLayer(RenderType.cutout(), d0, d1, d2, p_361439_, p_369924_);
             if (this.level.effects().constantAmbientLight()) {
                 Lighting.setupNetherLevel();
@@ -598,7 +_,7 @@
             multibuffersource$buffersource.endLastBatch();
             this.checkPoseStack(posestack);
             p_369478_.popPush("blockentities");
-            this.renderBlockEntities(posestack, multibuffersource$buffersource, multibuffersource$buffersource1, p_364769_, f);
+            var renderOutline = this.renderBlockEntities(posestack, multibuffersource$buffersource, multibuffersource$buffersource1, p_364769_, f, p_363733_) || p_362593_;
             multibuffersource$buffersource.endLastBatch();
             this.checkPoseStack(posestack);
             multibuffersource$buffersource.endBatch(RenderType.solid());
@@ -612,8 +_,8 @@
             multibuffersource$buffersource.endBatch(Sheets.hangingSignSheet());
             multibuffersource$buffersource.endBatch(Sheets.chestSheet());
             this.renderBuffers.outlineBufferSource().endOutlineBatch();
-            if (p_362593_) {
-                this.renderBlockOutline(p_364769_, multibuffersource$buffersource, posestack, false);
+            if (renderOutline) {
+                this.renderBlockOutline(p_364769_, multibuffersource$buffersource, posestack, false, f);
             }
 
             p_369478_.popPush("debug");
@@ -643,8 +_,8 @@
             this.renderSectionLayer(RenderType.translucent(), d0, d1, d2, p_361439_, p_369924_);
             p_369478_.popPush("string");
             this.renderSectionLayer(RenderType.tripwire(), d0, d1, d2, p_361439_, p_369924_);
-            if (p_362593_) {
-                this.renderBlockOutline(p_364769_, multibuffersource$buffersource, posestack, true);
+            if (renderOutline) {
+                this.renderBlockOutline(p_364769_, multibuffersource$buffersource, posestack, true, f);
             }
 
             multibuffersource$buffersource.endBatch();
@@ -652,7 +_,7 @@
         });
     }
 
-    private void addParticlesPass(FrameGraphBuilder p_366471_, Camera p_363128_, float p_365755_, FogParameters p_363695_) {
+    private void addParticlesPass(FrameGraphBuilder p_366471_, Camera p_363128_, float p_365755_, FogParameters p_363695_, Frustum frustum) {
         FramePass framepass = p_366471_.addPass("particles");
         if (this.targets.particles != null) {
             this.targets.particles = framepass.readsAndWrites(this.targets.particles);
@@ -671,7 +_,7 @@
                 resourcehandle1.get().copyDepthFrom(resourcehandle.get());
             }
 
-            this.minecraft.particleEngine.render(p_363128_, p_365755_, this.renderBuffers.bufferSource());
+            this.minecraft.particleEngine.render(p_363128_, p_365755_, this.renderBuffers.bufferSource(), frustum);
         });
     }
 
@@ -759,9 +_,9 @@
                             || p_365712_.isDetached()
                             || p_365712_.getEntity() instanceof LivingEntity && ((LivingEntity)p_365712_.getEntity()).isSleeping()
                     )
-                    && (!(entity instanceof LocalPlayer) || p_365712_.getEntity() == entity)) {
+                    && (!(entity instanceof LocalPlayer) || p_365712_.getEntity() == entity || (entity == minecraft.player && !minecraft.player.isSpectator()))) { //FORGE: render local player entity when it is not the renderViewEntity
                     p_368622_.add(entity);
-                    if (flag1 && this.minecraft.shouldEntityAppearGlowing(entity)) {
+                    if (flag1 && (this.minecraft.shouldEntityAppearGlowing(entity) || entity.hasCustomOutlineRendering(this.minecraft.player))) {
                         flag = true;
                     }
                 }
@@ -801,9 +_,10 @@
         }
     }
 
-    private void renderBlockEntities(
-        PoseStack p_366168_, MultiBufferSource.BufferSource p_362022_, MultiBufferSource.BufferSource p_369016_, Camera p_369847_, float p_367074_
+    private boolean renderBlockEntities(
+        PoseStack p_366168_, MultiBufferSource.BufferSource p_362022_, MultiBufferSource.BufferSource p_369016_, Camera p_369847_, float p_367074_, Frustum frustum
     ) {
+        boolean customOutline = false;
         Vec3 vec3 = p_369847_.getPosition();
         double d0 = vec3.x();
         double d1 = vec3.y();
@@ -813,6 +_,7 @@
             List<BlockEntity> list = sectionrenderdispatcher$rendersection.getCompiled().getRenderableBlockEntities();
             if (!list.isEmpty()) {
                 for (BlockEntity blockentity : list) {
+                    if (!frustum.isVisible(blockentity.getRenderBoundingBox())) continue;
                     BlockPos blockpos = blockentity.getBlockPos();
                     MultiBufferSource multibuffersource = p_362022_;
                     p_366168_.pushPose();
@@ -832,6 +_,9 @@
                         }
                     }
 
+                    if (!customOutline && this.shouldShowEntityOutlines() && blockentity.hasCustomOutlineRendering(this.minecraft.player))
+                        customOutline = true;
+
                     this.blockEntityRenderDispatcher.render(blockentity, p_367074_, p_366168_, multibuffersource);
                     p_366168_.popPose();
                 }
@@ -840,13 +_,18 @@
 
         synchronized (this.globalBlockEntities) {
             for (BlockEntity blockentity1 : this.globalBlockEntities) {
+                if (!frustum.isVisible(blockentity1.getRenderBoundingBox())) continue;
                 BlockPos blockpos1 = blockentity1.getBlockPos();
                 p_366168_.pushPose();
                 p_366168_.translate((double)blockpos1.getX() - d0, (double)blockpos1.getY() - d1, (double)blockpos1.getZ() - d2);
+                if (!customOutline && this.shouldShowEntityOutlines() && blockentity1.hasCustomOutlineRendering(this.minecraft.player))
+                    customOutline = true;
                 this.blockEntityRenderDispatcher.render(blockentity1, p_367074_, p_366168_, p_362022_);
                 p_366168_.popPose();
             }
         }
+
+        return customOutline;
     }
 
     private void renderBlockDestroyAnimation(PoseStack p_366956_, Camera p_369324_, MultiBufferSource.BufferSource p_365998_) {
@@ -865,14 +_,14 @@
                     p_366956_.translate((double)blockpos.getX() - d0, (double)blockpos.getY() - d1, (double)blockpos.getZ() - d2);
                     PoseStack.Pose posestack$pose = p_366956_.last();
                     VertexConsumer vertexconsumer = new SheetedDecalTextureGenerator(p_365998_.getBuffer(ModelBakery.DESTROY_TYPES.get(i)), posestack$pose, 1.0F);
-                    this.minecraft.getBlockRenderer().renderBreakingTexture(this.level.getBlockState(blockpos), blockpos, this.level, p_366956_, vertexconsumer);
+                    this.minecraft.getBlockRenderer().renderBreakingTexture(this.level.getBlockState(blockpos), blockpos, this.level, p_366956_, vertexconsumer, level.getModelDataManager().getAtOrEmpty(blockpos));
                     p_366956_.popPose();
                 }
             }
         }
     }
 
-    private void renderBlockOutline(Camera p_367935_, MultiBufferSource.BufferSource p_367206_, PoseStack p_365062_, boolean p_368189_) {
+    private void renderBlockOutline(Camera p_367935_, MultiBufferSource.BufferSource p_367206_, PoseStack p_365062_, boolean p_368189_, float partialTicks) {
         if (this.minecraft.hitResult instanceof BlockHitResult blockhitresult) {
             if (blockhitresult.getType() != HitResult.Type.MISS) {
                 BlockPos blockpos = blockhitresult.getBlockPos();
@@ -883,6 +_,9 @@
                         return;
                     }
 
+                    if (net.minecraftforge.client.ForgeHooksClient.onDrawHighlight(this, p_367935_, blockhitresult, partialTicks, p_365062_, p_367206_))
+                        return;
+
                     Vec3 vec3 = p_367935_.getPosition();
                     Boolean obool = this.minecraft.options.highContrastBlockOutline().get();
                     if (obool) {
@@ -898,6 +_,8 @@
                     p_367206_.endLastBatch();
                 }
             }
+        } else if (this.minecraft.hitResult instanceof net.minecraft.world.phys.EntityHitResult entity) {
+            net.minecraftforge.client.ForgeHooksClient.onDrawHighlight(this, p_367935_, entity, partialTicks, p_365062_, p_367206_);
         }
     }
 
@@ -1367,7 +_,7 @@
         } else {
             int i = p_109538_.getBrightness(LightLayer.SKY, p_109540_);
             int j = p_109538_.getBrightness(LightLayer.BLOCK, p_109540_);
-            int k = p_109539_.getLightEmission();
+            int k = p_109539_.getLightEmission(p_109538_, p_109540_);
             if (j < k) {
                 j = k;
             }
@@ -1429,5 +_,21 @@
 
     public CloudRenderer getCloudRenderer() {
         return this.cloudRenderer;
+    }
+
+    public Frustum getFrustum() {
+        return this.capturedFrustum != null ? this.capturedFrustum : this.cullingFrustum;
+    }
+
+    public int getTicks() {
+        return this.ticks;
+    }
+
+    public WeatherEffectRenderer getWeatherEffects() {
+        return this.weatherEffectRenderer;
+    }
+
+    public void setWeatherEffects(WeatherEffectRenderer value) {
+        this.weatherEffectRenderer = value;
     }
 }
