--- a/net/minecraft/client/renderer/LevelRenderer.java
+++ b/net/minecraft/client/renderer/LevelRenderer.java
@@ -175,6 +_,7 @@
         this.submitNodeStorage = p_427160_.getSubmitNodeStorage();
         this.levelRenderState = p_429507_;
         this.featureRenderDispatcher = p_427160_;
+        net.minecraftforge.client.event.ForgeEventFactoryClient.onInitLevelRenderer();
     }
 
     @Override
@@ -460,9 +_,10 @@
         profilerfiller.push("entities");
         this.extractVisibleEntities(p_109604_, frustum, p_342180_, this.levelRenderState);
         profilerfiller.popPush("blockEntities");
-        this.extractVisibleBlockEntities(p_109604_, f, this.levelRenderState);
+        this.extractVisibleBlockEntities(p_109604_, f, this.levelRenderState, frustum);
         profilerfiller.popPush("blockOutline");
-        this.extractBlockOutline(p_109604_, this.levelRenderState);
+        this.extractBlockOutline(p_109604_, this.levelRenderState, p_109603_);
+        p_109603_ = this.levelRenderState.blockOutlineRenderState != null;
         profilerfiller.popPush("blockBreaking");
         this.extractBlockDestroyAnimation(p_109604_, this.levelRenderState);
         profilerfiller.popPush("weather");
@@ -534,6 +_,7 @@
         }
 
         this.addLateDebugPass(framegraphbuilder, this.levelRenderState.cameraRenderState.pos, p_407881_, frustum);
+        net.minecraftforge.client.FramePassManager.insertForgePasses(framegraphbuilder, targets); // Forge: Modded passes are inserted here.
         profilerfiller.popPush("executeFrameGraph");
         framegraphbuilder.execute(p_367325_, new FrameGraphBuilder.Inspector() {
             @Override
@@ -801,7 +_,7 @@
         }
     }
 
-    private void extractVisibleBlockEntities(Camera p_427254_, float p_426770_, LevelRenderState p_428920_) {
+    private void extractVisibleBlockEntities(Camera p_427254_, float p_426770_, LevelRenderState p_428920_, Frustum frustum) {
         Vec3 vec3 = p_427254_.getPosition();
         double d0 = vec3.x();
         double d1 = vec3.y();
@@ -812,6 +_,7 @@
             List<BlockEntity> list = sectionrenderdispatcher$rendersection.getSectionMesh().getRenderableBlockEntities();
             if (!list.isEmpty()) {
                 for (BlockEntity blockentity : list) {
+                    if (!frustum.isVisible(blockentity.getRenderBoundingBox())) continue;
                     BlockPos blockpos = blockentity.getBlockPos();
                     SortedSet<BlockDestructionProgress> sortedset = this.destructionProgress.get(blockpos.asLong());
                     ModelFeatureRenderer.CrumblingOverlay modelfeaturerenderer$crumblingoverlay;
@@ -839,6 +_,7 @@
             if (blockentity1.isRemoved()) {
                 iterator.remove();
             } else {
+                if (!frustum.isVisible(blockentity1.getRenderBoundingBox())) continue;
                 BlockEntityRenderState blockentityrenderstate1 = this.blockEntityRenderDispatcher.tryExtractRenderState(blockentity1, p_426770_, null);
                 if (blockentityrenderstate1 != null) {
                     p_428920_.blockEntityRenderStates.add(blockentityrenderstate1);
@@ -895,13 +_,21 @@
             VertexConsumer vertexconsumer = new SheetedDecalTextureGenerator(
                 p_365998_.getBuffer(ModelBakery.DESTROY_TYPES.get(blockbreakingrenderstate.progress)), posestack$pose, 1.0F
             );
-            this.minecraft.getBlockRenderer().renderBreakingTexture(blockbreakingrenderstate.blockState, blockpos, blockbreakingrenderstate, p_366956_, vertexconsumer);
+            this.minecraft.getBlockRenderer().renderBreakingTexture(blockbreakingrenderstate.blockState, blockpos, blockbreakingrenderstate, p_366956_, vertexconsumer, level.getModelDataManager().getAtOrEmpty(blockpos));
             p_366956_.popPose();
         }
     }
 
-    private void extractBlockOutline(Camera p_428965_, LevelRenderState p_424419_) {
+    private void extractBlockOutline(Camera p_428965_, LevelRenderState p_424419_, boolean shouldRender) {
         p_424419_.blockOutlineRenderState = null;
+        var custom = net.minecraftforge.client.ForgeHooksClient.onExtractBlockOutline(this, p_428965_, p_424419_, this.minecraft.hitResult);
+        if (custom != null) {
+            p_424419_.blockOutlineRenderState = new BlockOutlineRenderState(BlockPos.ZERO, false, false, net.minecraft.world.phys.shapes.Shapes.empty(), null, null, null, custom);
+            return;
+        } else if (!shouldRender) {
+            return;
+        }
+
         if (this.minecraft.hitResult instanceof BlockHitResult blockhitresult) {
             if (blockhitresult.getType() != HitResult.Type.MISS) {
                 BlockPos blockpos = blockhitresult.getBlockPos();
@@ -927,6 +_,10 @@
     private void renderBlockOutline(MultiBufferSource.BufferSource p_367206_, PoseStack p_365062_, boolean p_368189_, LevelRenderState p_422597_) {
         BlockOutlineRenderState blockoutlinerenderstate = p_422597_.blockOutlineRenderState;
         if (blockoutlinerenderstate != null) {
+            if (blockoutlinerenderstate.customRenderer() != null) {
+                blockoutlinerenderstate.customRenderer().render(p_367206_, p_365062_, p_368189_, p_422597_);
+                return;
+            }
             if (blockoutlinerenderstate.isTranslucent() == p_368189_) {
                 Vec3 vec3 = p_422597_.cameraRenderState.pos;
                 if (blockoutlinerenderstate.highContrast()) {
@@ -1356,7 +_,7 @@
         } else {
             int i = p_398213_.packedBrightness(p_109538_, p_109540_);
             int j = LightTexture.block(i);
-            int k = p_109539_.getLightEmission();
+            int k = p_109539_.getLightEmission(p_109538_, p_109540_);
             if (j < k) {
                 int l = LightTexture.sky(i);
                 return LightTexture.pack(k, l);
@@ -1418,6 +_,18 @@
 
     public CloudRenderer getCloudRenderer() {
         return this.cloudRenderer;
+    }
+
+    public int getTicks() {
+        return this.ticks;
+    }
+
+    public WeatherEffectRenderer getWeatherEffects() {
+        return this.weatherEffectRenderer;
+    }
+
+    public void setWeatherEffects(WeatherEffectRenderer value) {
+        this.weatherEffectRenderer = value;
     }
 
     @FunctionalInterface
