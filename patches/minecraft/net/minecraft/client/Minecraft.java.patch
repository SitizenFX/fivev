--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -260,7 +_,7 @@
 import org.slf4j.Logger;
 
 @OnlyIn(Dist.CLIENT)
-public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements WindowEventHandler {
+public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements WindowEventHandler, net.minecraftforge.client.extensions.IForgeMinecraft {
     static Minecraft instance;
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int MAX_TICKS_PER_UPDATE = 10;
@@ -439,7 +_,6 @@
             }
         }, Util.nonCriticalIoPool());
         LOGGER.info("Setting user: {}", this.user.getName());
-        LOGGER.debug("(Session ID is {})", this.user.getSessionId());
         this.demo = p_91084_.game.demo;
         this.allowsMultiplayer = !p_91084_.game.disableMultiplayer;
         this.allowsChat = !p_91084_.game.disableChat;
@@ -491,10 +_,9 @@
             LOGGER.error("Couldn't set icon", (Throwable)ioexception);
         }
 
+        // FORGE: Move mouse and keyboard handler setup further below
         this.mouseHandler = new MouseHandler(this);
-        this.mouseHandler.setup(this.window);
         this.keyboardHandler = new KeyboardHandler(this);
-        this.keyboardHandler.setup(this.window);
         RenderSystem.initRenderer(
             this.window.handle(),
             this.options.glDebugVerbosity,
@@ -505,6 +_,7 @@
         LOGGER.info("Using optional rendering extensions: {}", String.join(", ", RenderSystem.getDevice().getEnabledExtensions()));
         this.mainRenderTarget = new MainTarget(this.window.getWidth(), this.window.getHeight());
         this.resourceManager = new ReloadableResourceManager(PackType.CLIENT_RESOURCES);
+        net.minecraftforge.client.loading.ClientModLoader.begin(this, this.resourcePackRepository, this.resourceManager);
         this.resourcePackRepository.reload();
         this.options.loadSelectedResourcePacks(this.resourcePackRepository);
         this.languageManager = new LanguageManager(this.options.languageCode, p_340763_ -> {
@@ -593,6 +_,7 @@
         this.particleResources = new ParticleResources();
         this.resourceManager.registerReloadListener(this.particleResources);
         this.particleEngine = new ParticleEngine(this.level, this.particleResources);
+        net.minecraftforge.client.ForgeHooksClient.onRegisterParticleProviders(this.particleResources);
         this.particleResources.onReload(this.particleEngine::clearParticles);
         this.waypointStyles = new WaypointStyleManager();
         this.resourceManager.registerReloadListener(this.waypointStyles);
@@ -604,6 +_,9 @@
         this.resourceManager.registerReloadListener(this.gpuWarnlistManager);
         this.resourceManager.registerReloadListener(this.regionalCompliancies);
         this.gui = new Gui(this);
+        // FORGE: Moved keyboard and mouse handler setup below ingame gui creation to prevent NPEs in them.
+        this.mouseHandler.setup(this.window);
+        this.keyboardHandler.setup(this.window);
         RealmsClient realmsclient = RealmsClient.getOrCreate(this);
         this.realmsDataFetcher = new RealmsDataFetcher(realmsclient);
         RenderSystem.setErrorCallback(this::onFullscreenError);
@@ -636,6 +_,7 @@
             }
         }
 
+        net.minecraftforge.client.ForgeHooksClient.initClientHooks(this, this.resourceManager);
         this.window.updateVsync(this.options.enableVsync().get());
         this.window.updateRawMouseInput(this.options.rawMouseInput().get());
         this.window.setAllowCursorChanges(this.options.allowCursorChanges().get());
@@ -659,16 +_,17 @@
         GameLoadTimesEvent.INSTANCE.beginStep(TelemetryProperty.LOAD_TIME_LOADING_OVERLAY_MS);
         Minecraft.GameLoadCookie minecraft$gameloadcookie = new Minecraft.GameLoadCookie(realmsclient, p_91084_.quickPlay);
         this.setOverlay(
-            new LoadingOverlay(
-                this, reloadinstance, p_296164_ -> Util.ifElse(p_296164_, p_296162_ -> this.rollbackResourcePacks(p_296162_, minecraft$gameloadcookie), () -> {
+            net.minecraftforge.fml.loading.ImmediateWindowHandler.<LoadingOverlay>loadingOverlay(
+                () -> this, () -> reloadinstance, p_296164_ -> Util.ifElse(p_296164_, p_296162_ -> this.rollbackResourcePacks(p_296162_, minecraft$gameloadcookie), () -> {
                     if (SharedConstants.IS_RUNNING_IN_IDE) {
                         this.selfTest();
                     }
 
                     this.reloadStateTracker.finishReload();
                     this.onResourceLoadFinished(minecraft$gameloadcookie);
+                    net.minecraftforge.client.loading.ClientModLoader.completeModLoading();
                 }), false
-            )
+            ).get()
         );
         this.quickPlayLog = QuickPlayLog.of(p_91084_.quickPlay.logPath());
         this.framerateLimitTracker = new FramerateLimitTracker(this.options, this);
@@ -787,6 +_,7 @@
         StringBuilder stringbuilder = new StringBuilder("Minecraft");
         if (checkModStatus().shouldReportAsModified()) {
             stringbuilder.append("*");
+            stringbuilder.append(" Forge");
         }
 
         stringbuilder.append(" ");
@@ -810,6 +_,8 @@
     }
 
     private UserApiService createUserApiService(YggdrasilAuthenticationService p_193586_, GameConfig p_193587_) {
+        if ("0".equals(p_193587_.user.user.getAccessToken())) // Forge: We use "0" in dev. Short circuit to stop exception spam.
+            return UserApiService.OFFLINE;
         return p_193587_.game.offlineDeveloperMode ? UserApiService.OFFLINE : p_193586_.createUserApiService(p_193587_.user.user.getAccessToken());
     }
 
@@ -822,7 +_,7 @@
     }
 
     private void rollbackResourcePacks(Throwable p_91240_, @Nullable Minecraft.GameLoadCookie p_299515_) {
-        if (this.resourcePackRepository.getSelectedIds().size() > 1) {
+        if (this.resourcePackRepository.getSelectedPacks().stream().anyMatch(e -> !e.isRequired())) { //Forge: This caused infinite loop if any resource packs are forced. Such as mod resources. So check if we can disable any.
             this.clearResourcePacksOnError(p_91240_, null, p_299515_);
         } else {
             Util.throwAsRuntime(p_91240_);
@@ -1108,12 +_,6 @@
             LOGGER.error("setScreen called from non-game thread");
         }
 
-        if (this.screen != null) {
-            this.screen.removed();
-        } else {
-            this.setLastInputType(InputType.NONE);
-        }
-
         if (p_91153_ == null) {
             if (this.clientLevelTeardownInProgress) {
                 throw new IllegalStateException("Trying to return to in-game GUI during disconnection");
@@ -1132,6 +_,23 @@
             }
         }
 
+        net.minecraftforge.client.ForgeHooksClient.clearGuiLayers(this);
+        Screen old = this.screen;
+        if (p_91153_ != null) {
+           var event = net.minecraftforge.client.event.ForgeEventFactoryClient.onScreenOpening(old, p_91153_);
+           if (event == null) return;
+           p_91153_ = event;
+        }
+
+        if (p_91153_ != old) {
+            if (old != null) {
+                net.minecraftforge.client.event.ForgeEventFactoryClient.onScreenClose(old);
+                old.removed();
+            } else {
+                this.setLastInputType(InputType.NONE);
+            }
+        }
+
         this.screen = p_91153_;
         if (this.screen != null) {
             this.screen.added();
@@ -1214,6 +_,7 @@
             FreeTypeUtil.destroy();
             Util.shutdownExecutors();
             RenderSystem.getDevice().close();
+            net.minecraftforge.fml.config.ConfigTracker.INSTANCE.forceUnload();
         } catch (Throwable throwable) {
             LOGGER.error("Shutdown failure!", throwable);
             throw throwable;
@@ -1278,7 +_,9 @@
         RenderSystem.getDevice().createCommandEncoder().clearColorAndDepthTextures(rendertarget.getColorTexture(), 0, rendertarget.getDepthTexture(), 1.0);
         profilerfiller.push("gameRenderer");
         if (!this.noRender) {
+            net.minecraftforge.client.event.ForgeEventFactoryClient.onRenderTickStart(this.deltaTracker);
             this.gameRenderer.render(this.deltaTracker, p_91384_);
+            net.minecraftforge.client.event.ForgeEventFactoryClient.onRenderTickEnd(this.deltaTracker);
         }
 
         profilerfiller.popPush("blit");
@@ -1388,10 +_,12 @@
         this.window.setGuiScale(i);
         if (this.screen != null) {
             this.screen.resize(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
+            net.minecraftforge.client.ForgeHooksClient.resizeGuiLayers(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
         }
 
         RenderTarget rendertarget = this.getMainRenderTarget();
         rendertarget.resize(this.window.getWidth(), this.window.getHeight());
+        if (this.gameRenderer != null)
         this.gameRenderer.resize(this.window.getWidth(), this.window.getHeight());
         this.mouseHandler.setIgnoreFirstMove();
     }
@@ -1529,6 +_,7 @@
     }
 
     public void stop() {
+        if (this.isRunning()) net.minecraftforge.event.ForgeEventFactory.onGameShuttingDown();
         this.running = false;
     }
 
@@ -1556,10 +_,18 @@
             if (p_91387_ && this.hitResult != null && this.hitResult.getType() == HitResult.Type.BLOCK) {
                 BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
                 BlockPos blockpos = blockhitresult.getBlockPos();
-                if (!this.level.getBlockState(blockpos).isAir()) {
+                if (!this.level.isEmptyBlock(blockpos)) {
+                    var inputEvent = new net.minecraftforge.client.event.InputEvent.InteractionKeyMappingTriggered(0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+                    if (net.minecraftforge.client.event.InputEvent.InteractionKeyMappingTriggered.BUS.post(inputEvent)) {
+                       if (inputEvent.shouldSwingHand()) {
+                          this.level.addBreakingBlockEffect(blockpos, blockhitresult);
+                          this.player.swing(InteractionHand.MAIN_HAND);
+                       }
+                       return;
+                    }
                     Direction direction = blockhitresult.getDirection();
-                    if (this.gameMode.continueDestroyBlock(blockpos, direction)) {
-                        this.level.addBreakingBlockEffect(blockpos, direction);
+                    if (this.gameMode.continueDestroyBlock(blockpos, direction) && inputEvent.shouldSwingHand()) {
+                        this.level.addBreakingBlockEffect(blockpos, blockhitresult);
                         this.player.swing(InteractionHand.MAIN_HAND);
                     }
                 }
@@ -1587,6 +_,8 @@
                 return false;
             } else {
                 boolean flag = false;
+                var inputEvent = new net.minecraftforge.client.event.InputEvent.InteractionKeyMappingTriggered(0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+                if (!net.minecraftforge.client.event.InputEvent.InteractionKeyMappingTriggered.BUS.post(inputEvent))
                 switch (this.hitResult.getType()) {
                     case ENTITY:
                         this.gameMode.attack(this.player, ((EntityHitResult)this.hitResult).getEntity());
@@ -1594,7 +_,7 @@
                     case BLOCK:
                         BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
                         BlockPos blockpos = blockhitresult.getBlockPos();
-                        if (!this.level.getBlockState(blockpos).isAir()) {
+                        if (!this.level.isEmptyBlock(blockpos)) {
                             this.gameMode.startDestroyBlock(blockpos, blockhitresult.getDirection());
                             if (this.level.getBlockState(blockpos).isAir()) {
                                 flag = true;
@@ -1607,8 +_,10 @@
                         }
 
                         this.player.resetAttackStrengthTicker();
+                        net.minecraftforge.event.ForgeEventFactory.onLeftClickEmpty(this.player);
                 }
 
+                if (inputEvent.shouldSwingHand())
                 this.player.swing(InteractionHand.MAIN_HAND);
                 return flag;
             }
@@ -1624,6 +_,12 @@
                 }
 
                 for (InteractionHand interactionhand : InteractionHand.values()) {
+                    var inputEvent = new net.minecraftforge.client.event.InputEvent.InteractionKeyMappingTriggered(1, this.options.keyUse, interactionhand);
+                    if (net.minecraftforge.client.event.InputEvent.InteractionKeyMappingTriggered.BUS.post(inputEvent)) {
+                       if (inputEvent.shouldSwingHand()) this.player.swing(interactionhand);
+                       return;
+                    }
+
                     ItemStack itemstack = this.player.getItemInHand(interactionhand);
                     if (!itemstack.isItemEnabled(this.level.enabledFeatures())) {
                         return;
@@ -1644,7 +_,7 @@
                                 }
 
                                 if (interactionresult instanceof InteractionResult.Success interactionresult$success2) {
-                                    if (interactionresult$success2.swingSource() == InteractionResult.SwingSource.CLIENT) {
+                                    if (interactionresult$success2.swingSource() == InteractionResult.SwingSource.CLIENT && inputEvent.shouldSwingHand()) {
                                         this.player.swing(interactionhand);
                                     }
 
@@ -1656,7 +_,7 @@
                                 int i = itemstack.getCount();
                                 InteractionResult interactionresult1 = this.gameMode.useItemOn(this.player, interactionhand, blockhitresult);
                                 if (interactionresult1 instanceof InteractionResult.Success interactionresult$success) {
-                                    if (interactionresult$success.swingSource() == InteractionResult.SwingSource.CLIENT) {
+                                    if (interactionresult$success.swingSource() == InteractionResult.SwingSource.CLIENT && inputEvent.shouldSwingHand()) {
                                         this.player.swing(interactionhand);
                                         if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.player.hasInfiniteMaterials())) {
                                             this.gameRenderer.itemInHandRenderer.itemUsed(interactionhand);
@@ -1672,6 +_,9 @@
                         }
                     }
 
+                    if (itemstack.isEmpty() && (this.hitResult == null || this.hitResult.getType() == HitResult.Type.MISS))
+                       net.minecraftforge.event.ForgeEventFactory.onRightClickEmpty(this.player, interactionhand);
+
                     if (!itemstack.isEmpty()
                         && this.gameMode.useItem(this.player, interactionhand) instanceof InteractionResult.Success interactionresult$success1) {
                         if (interactionresult$success1.swingSource() == InteractionResult.SwingSource.CLIENT) {
@@ -1701,6 +_,8 @@
         }
 
         ProfilerFiller profilerfiller = Profiler.get();
+        net.minecraftforge.event.ForgeEventFactory.onPreClientTick();
+
         profilerfiller.push("gui");
         this.chatListener.tick();
         this.gui.tick(this.pause);
@@ -1786,6 +_,7 @@
 
                 this.tutorial.tick();
 
+                net.minecraftforge.event.ForgeEventFactory.onPreLevelTick(this.level, () -> true);
                 try {
                     this.level.tick(() -> true);
                 } catch (Throwable throwable1) {
@@ -1799,6 +_,7 @@
 
                     throw new ReportedException(crashreport1);
                 }
+                net.minecraftforge.event.ForgeEventFactory.onPostLevelTick(this.level, () -> true);
             }
 
             profilerfiller.popPush("animateTick");
@@ -1823,6 +_,7 @@
         profilerfiller.popPush("keyboard");
         this.keyboardHandler.tick();
         profilerfiller.pop();
+        net.minecraftforge.event.ForgeEventFactory.onPostClientTick();
     }
 
     private boolean isLevelRunningNormally() {
@@ -2041,6 +_,7 @@
     }
 
     public void setLevel(ClientLevel p_91157_) {
+        if (this.level != null) net.minecraftforge.event.ForgeEventFactory.onLevelUnload(this.level);
         this.level = p_91157_;
         this.updateLevelInEngines(p_91157_);
     }
@@ -2094,6 +_,7 @@
         IntegratedServer integratedserver = this.singleplayerServer;
         this.singleplayerServer = null;
         this.gameRenderer.resetData();
+        net.minecraftforge.client.event.ForgeEventFactoryClient.firePlayerLogout(this.gameMode, this.player);
         this.gameMode = null;
         this.narrator.clear();
         this.clientLevelTeardownInProgress = true;
@@ -2101,6 +_,7 @@
         try {
             if (this.level != null) {
                 this.gui.onDisconnected();
+                net.minecraftforge.event.ForgeEventFactory.onLevelUnload(this.level);
             }
 
             if (integratedserver != null) {
@@ -2113,6 +_,7 @@
                 }
 
                 profilerfiller.pop();
+                net.minecraftforge.client.ForgeHooksClient.handleClientLevelClosing(this.level);
             }
 
             this.setScreenAndShow(p_335030_);
@@ -2254,6 +_,7 @@
 
     private void pickBlock() {
         if (this.hitResult != null && this.hitResult.getType() != HitResult.Type.MISS) {
+            if (net.minecraftforge.client.event.ForgeEventFactoryClient.onClickInputPickBlock(this.options.keyPickItem)) return;
             boolean flag = this.hasControlDown();
             switch (this.hitResult) {
                 case BlockHitResult blockhitresult:
