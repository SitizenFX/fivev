--- a/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -43,7 +_,7 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 
-public abstract class AbstractMinecart extends VehicleEntity {
+public abstract class AbstractMinecart extends VehicleEntity implements net.minecraftforge.common.extensions.IForgeAbstractMinecart {
     private static final Vec3 LOWERED_PASSENGER_ATTACHMENT = new Vec3(0.0, 0.0, 0.0);
     private static final EntityDataAccessor<Optional<BlockState>> DATA_ID_CUSTOM_DISPLAY_BLOCK = SynchedEntityData.defineId(
         AbstractMinecart.class, EntityDataSerializers.OPTIONAL_BLOCK_STATE
@@ -93,15 +_,12 @@
             }
         )
     );
+    private boolean canBePushed = true;
 
     protected AbstractMinecart(EntityType<?> p_38087_, Level p_38088_) {
         super(p_38087_, p_38088_);
         this.blocksBuilding = true;
-        if (useExperimentalMovement(p_38088_)) {
-            this.behavior = new NewMinecartBehavior(this);
-        } else {
-            this.behavior = new OldMinecartBehavior(this);
-        }
+        this.behavior = behaviorFactory.apply(this, p_38088_);
     }
 
     protected AbstractMinecart(EntityType<?> p_38090_, Level p_38091_, double p_38092_, double p_38093_, double p_38094_) {
@@ -164,7 +_,7 @@
 
     @Override
     public boolean isPushable() {
-        return true;
+        return canBePushed;
     }
 
     @Override
@@ -361,16 +_,24 @@
     }
 
     protected void comeOffTrack(ServerLevel p_365684_) {
-        double d0 = this.getMaxSpeed(p_365684_);
+        double d0 = this.onGround() ? this.getMaxSpeed(p_365684_) : getMaxSpeedAirLateral();
         Vec3 vec3 = this.getDeltaMovement();
         this.setDeltaMovement(Mth.clamp(vec3.x, -d0, d0), vec3.y, Mth.clamp(vec3.z, -d0, d0));
         if (this.onGround()) {
             this.setDeltaMovement(this.getDeltaMovement().scale(0.5));
         }
 
+        if (getMaxSpeedAirVertical() > 0 && getDeltaMovement().y > getMaxSpeedAirVertical()) {
+            if (Math.abs(getDeltaMovement().x) < 0.3f && Math.abs(getDeltaMovement().z) < 0.3f) {
+                setDeltaMovement(new Vec3(getDeltaMovement().x, 0.15f, getDeltaMovement().z));
+            } else {
+                setDeltaMovement(new Vec3(getDeltaMovement().x, getMaxSpeedAirVertical(), getDeltaMovement().z));
+            }
+        }
+
         this.move(MoverType.SELF, this.getDeltaMovement());
         if (!this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.95));
+            this.setDeltaMovement(this.getDeltaMovement().scale(getDragAir()));
         }
     }
 
@@ -427,7 +_,7 @@
     public Vec3 getRedstoneDirection(BlockPos p_369874_) {
         BlockState blockstate = this.level().getBlockState(p_369874_);
         if (blockstate.is(Blocks.POWERED_RAIL) && blockstate.getValue(PoweredRailBlock.POWERED)) {
-            RailShape railshape = blockstate.getValue(((BaseRailBlock)blockstate.getBlock()).getShapeProperty());
+            RailShape railshape = ((BaseRailBlock)blockstate.getBlock()).getRailDirection(blockstate, this.level(), p_369874_, this);
             if (railshape == RailShape.EAST_WEST) {
                 if (this.isRedstoneConductor(p_369874_.west())) {
                     return new Vec3(1.0, 0.0, 0.0);
@@ -599,5 +_,42 @@
 
     public boolean isFurnace() {
         return false;
+    }
+
+    private static java.util.function.BiFunction<AbstractMinecart, Level, MinecartBehavior> behaviorFactory = (cart, level) -> {
+        return useExperimentalMovement(level) ? new NewMinecartBehavior(cart) : new OldMinecartBehavior(cart);
+    };
+    public static void setBehaviorFactory(java.util.function.BiFunction<AbstractMinecart, Level, MinecartBehavior> factory) { behaviorFactory = factory; }
+    public static java.util.function.BiFunction<AbstractMinecart, Level, MinecartBehavior> getBehaviorFactory() { return behaviorFactory; }
+
+              private boolean canUseRail = true;
+    @Override public  boolean canUseRail() { return canUseRail; }
+    @Override public  void    setCanUseRail(boolean value) { this.canUseRail = value; }
+              private float    currentSpeedCapOnRail = getMaxCartSpeedOnRail();
+    @Override public  float getCurrentCartSpeedCapOnRail() { return currentSpeedCapOnRail; }
+    @Override public  void  setCurrentCartSpeedCapOnRail(float value) { currentSpeedCapOnRail = Math.min(value, getMaxCartSpeedOnRail()); }
+              private Float    maxSpeedAirLateral = null;
+    @Override public  float getMaxSpeedAirLateral() { return maxSpeedAirLateral == null ? (float)this.getMaxSpeed((ServerLevel)this.level()) : maxSpeedAirLateral; }
+    @Override public  void  setMaxSpeedAirLateral(float value) { maxSpeedAirLateral = value; }
+              private float    maxSpeedAirVertical = DEFAULT_MAX_SPEED_AIR_VERTICAL;
+    @Override public  float getMaxSpeedAirVertical() { return maxSpeedAirVertical; }
+    @Override public  void  setMaxSpeedAirVertical(float value) { maxSpeedAirVertical = value; }
+              private double    dragAir = DEFAULT_AIR_DRAG;
+    @Override public  double getDragAir() { return dragAir; }
+    @Override public  void   setDragAir(double value) { dragAir = value; }
+    @Override
+    public double getMaxSpeedWithRail() { //Non-default because getMaximumSpeed is protected
+        if (!canUseRail()) {
+            return getMaxSpeed((ServerLevel)this.level());
+        }
+        BlockPos pos = this.getCurrentRailPosition();
+        BlockState state = this.level().getBlockState(pos);
+
+        if (!state.is(BlockTags.RAILS)) {
+            return getMaxSpeed((ServerLevel)this.level());
+        }
+
+        float railMaxSpeed = ((BaseRailBlock)state.getBlock()).getRailMaxSpeed(state, this.level(), pos, this);
+        return Math.min(railMaxSpeed, getCurrentCartSpeedCapOnRail());
     }
 }
