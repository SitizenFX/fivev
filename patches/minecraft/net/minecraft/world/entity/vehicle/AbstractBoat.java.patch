--- a/net/minecraft/world/entity/vehicle/AbstractBoat.java
+++ b/net/minecraft/world/entity/vehicle/AbstractBoat.java
@@ -46,7 +_,7 @@
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public abstract class AbstractBoat extends VehicleEntity implements Leashable {
+public abstract class AbstractBoat extends VehicleEntity implements Leashable, net.minecraftforge.common.extensions.IForgeAbstractBoat {
     private static final EntityDataAccessor<Boolean> DATA_ID_PADDLE_LEFT = SynchedEntityData.defineId(AbstractBoat.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_ID_PADDLE_RIGHT = SynchedEntityData.defineId(AbstractBoat.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Integer> DATA_ID_BUBBLE_TIME = SynchedEntityData.defineId(AbstractBoat.class, EntityDataSerializers.INT);
@@ -423,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(l1, k1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)) {
+                    if (this.canBoatInFluid(fluidstate)) {
                         f = Math.max(f, fluidstate.getHeight(this.level(), blockpos$mutableblockpos));
                     }
 
@@ -469,7 +_,7 @@
                                     voxelshape,
                                     BooleanOp.AND
                                 )) {
-                                f += blockstate.getBlock().getFriction();
+                                f += blockstate.getFriction(this.level(), blockpos$mutableblockpos, this);
                                 k1++;
                             }
                         }
@@ -498,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(k1, l1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)) {
+                    if (this.canBoatInFluid(fluidstate)) {
                         float f = l1 + fluidstate.getHeight(this.level(), blockpos$mutableblockpos);
                         this.waterLevel = Math.max((double)f, this.waterLevel);
                         flag |= aabb.minY < f;
@@ -528,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(k1, l1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)
+                    if (this.canBoatInFluid(fluidstate)
                         && d0 < blockpos$mutableblockpos.getY() + fluidstate.getHeight(this.level(), blockpos$mutableblockpos)) {
                         if (!fluidstate.isSource()) {
                             return AbstractBoat.Status.UNDER_FLOWING_WATER;
@@ -731,7 +_,7 @@
         if (!this.isPassenger()) {
             if (p_361999_) {
                 this.resetFallDistance();
-            } else if (!this.level().getFluidState(this.blockPosition().below()).is(FluidTags.WATER) && p_361830_ < 0.0) {
+            } else if (!this.canBoatInFluid(this.level().getFluidState(this.blockPosition().below())) && p_361830_ < 0.0) {
                 this.fallDistance -= (float)p_361830_;
             }
         }
@@ -755,7 +_,7 @@
 
     @Override
     protected boolean canAddPassenger(Entity p_366021_) {
-        return this.getPassengers().size() < this.getMaxPassengers() && !this.isEyeInFluid(FluidTags.WATER);
+        return this.getPassengers().size() < this.getMaxPassengers() && !this.canBoatInFluid(this.getEyeInFluidType());
     }
 
     protected int getMaxPassengers() {
