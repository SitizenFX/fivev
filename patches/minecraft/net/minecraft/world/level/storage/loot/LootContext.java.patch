--- a/net/minecraft/world/level/storage/loot/LootContext.java
+++ b/net/minecraft/world/level/storage/loot/LootContext.java
@@ -24,11 +_,17 @@
     private final RandomSource random;
     private final HolderGetter.Provider lootDataResolver;
     private final Set<LootContext.VisitedEntry<?>> visitedElements = Sets.newLinkedHashSet();
+    private ResourceLocation queriedLootTableId;
 
     LootContext(LootParams p_287722_, RandomSource p_287702_, HolderGetter.Provider p_330439_) {
+        this(p_287722_, p_287702_, p_330439_, null);
+    }
+
+    LootContext(LootParams p_287722_, RandomSource p_287702_, HolderGetter.Provider p_330439_, ResourceLocation queriedLootTableId) {
         this.params = p_287722_;
         this.random = p_287702_;
         this.lootDataResolver = p_330439_;
+        this.queriedLootTableId = queriedLootTableId;
     }
 
     public boolean hasParameter(ContextKey<?> p_368930_) {
@@ -76,6 +_,10 @@
         return this.params.getLevel();
     }
 
+    public LootParams getParams() {
+        return this.params;
+    }
+
     public static LootContext.VisitedEntry<LootTable> createVisitedEntry(LootTable p_279327_) {
         return new LootContext.VisitedEntry<>(LootDataType.TABLE, p_279327_);
     }
@@ -88,6 +_,18 @@
         return new LootContext.VisitedEntry<>(LootDataType.MODIFIER, p_279163_);
     }
 
+    public int getLootingModifier() {
+        return net.minecraftforge.common.ForgeHooks.getLootingLevel(getOptionalParameter(LootContextParams.THIS_ENTITY), getOptionalParameter(LootContextParams.ATTACKING_ENTITY), getOptionalParameter(LootContextParams.DAMAGE_SOURCE));
+    }
+
+    public void setQueriedLootTableId(ResourceLocation queriedLootTableId) {
+        if (this.queriedLootTableId == null && queriedLootTableId != null) this.queriedLootTableId = queriedLootTableId;
+    }
+
+    public ResourceLocation getQueriedLootTableId() {
+        return this.queriedLootTableId == null ? net.minecraftforge.common.loot.LootTableIdCondition.UNKNOWN_LOOT_TABLE : this.queriedLootTableId;
+    }
+
     public static enum BlockEntityTarget implements StringRepresentable {
         BLOCK_ENTITY("block_entity", LootContextParams.BLOCK_ENTITY);
 
@@ -113,11 +_,18 @@
         private final LootParams params;
         @Nullable
         private RandomSource random;
+        private ResourceLocation queriedLootTableId; // Forge: correctly pass around loot table ID with copy constructor
 
         public Builder(LootParams p_287628_) {
             this.params = p_287628_;
         }
 
+        public Builder(LootContext context) {
+            this.params = context.params;
+            this.random = context.random;
+            this.queriedLootTableId = context.queriedLootTableId;
+        }
+
         public LootContext.Builder withOptionalRandomSeed(long p_78966_) {
             if (p_78966_ != 0L) {
                 this.random = RandomSource.create(p_78966_);
@@ -131,6 +_,11 @@
             return this;
         }
 
+        public LootContext.Builder withQueriedLootTableId(ResourceLocation queriedLootTableId) {
+            this.queriedLootTableId = queriedLootTableId;
+            return this;
+        }
+
         public ServerLevel getLevel() {
             return this.params.getLevel();
         }
@@ -139,7 +_,7 @@
             ServerLevel serverlevel = this.getLevel();
             MinecraftServer minecraftserver = serverlevel.getServer();
             RandomSource randomsource = Optional.ofNullable(this.random).or(() -> p_299315_.map(serverlevel::getRandomSequence)).orElseGet(serverlevel::getRandom);
-            return new LootContext(this.params, randomsource, minecraftserver.reloadableRegistries().lookup());
+            return new LootContext(this.params, randomsource, minecraftserver.reloadableRegistries().lookup(), queriedLootTableId);
         }
     }
 
